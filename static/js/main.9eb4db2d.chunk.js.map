{"version":3,"sources":["components/ModalCreateTask.js","components/EditModalTask.js","components/TaskCard.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["ModalCreateTask","modal","toggle","save","useState","Date","selectedStartDate","setSelectedStartDate","selectedEndDate","setSelectedEndDate","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","selected","date","dateFormat","minDate","isClearable","row","ModalFooter","Button","color","onClick","preventDefault","taskObj","getDate","getMonth","getFullYear","EditModalTask","updateTask","useEffect","Name","Description","tempObj","TaskCard","index","deleteTask","updateListArray","setModal","style","Math","random","StartDate","EndDate","obj","Home","taskList","setTaskList","dupList","splice","localStorage","setItem","JSON","stringify","window","location","reload","tempList","arr","getItem","parse","class","map","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb4db2d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ModalCreateTask = ({modal,toggle,save}) => {\r\n    const [selectedStartDate,setSelectedStartDate]=useState(new Date())\r\n    const [selectedEndDate,setSelectedEndDate]=useState(new Date())\r\n    const [taskName,setTaskName]=useState(\"\");\r\n    const [description,setDescription]=useState(\"\");\r\n    const handleChange=(e) =>{\r\n        const {name,value}=e.target\r\n        if(name===\"taskName\") {\r\n          setTaskName(value)\r\n        }\r\n       \r\n        else {\r\n          setDescription(value)\r\n    }\r\n  }\r\n    const handleSave =(e)=>{\r\n      e.preventDefault()\r\n      let taskObj={}\r\n      taskObj[\"Name\"]=taskName\r\n      taskObj[\"Description\"]=description\r\n      taskObj[\"StartDate\"]=selectedStartDate.getDate() + '/0' + (selectedStartDate.getMonth() + 1) + '/' + selectedStartDate.getFullYear()\r\n      taskObj[\"EndDate\"]= selectedEndDate.getDate() + '/0' + (selectedEndDate.getMonth() + 1) + '/' + selectedEndDate.getFullYear()\r\n      save(taskObj)\r\n    }\r\n  //  const handleDate =(e)=>{\r\n\r\n  //  }\r\n  return (\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Create Task</ModalHeader>\r\n        <ModalBody>\r\n        <form>\r\n          <div className=\"form-group\">\r\n              <label>Task Name</label>\r\n              <input type=\"text\" className=\"form-control\" value={taskName} onChange={handleChange} name=\"taskName\"/>\r\n            </div>\r\n            <label>Select Starting Date: </label>\r\n           <DatePicker selected={selectedStartDate}  onChange={date => setSelectedStartDate(date)} \r\n           dateFormat='dd/MM/yyyy'\r\n             minDate={new Date()}\r\n             isClearable/>\r\n             <label>Select Completion Date: </label>\r\n           <DatePicker selected={selectedEndDate}  onChange={date => setSelectedEndDate(date)} \r\n           dateFormat='dd/MM/yyyy'\r\n             minDate={new Date()}\r\n             isClearable/>\r\n            <div className=\"form-group\">\r\n            <label>Task Description</label>\r\n                    <textarea row=\"5\"  className=\"form-control\"value={description} onChange={handleChange} name=\"description\"></textarea>\r\n                    </div>  \r\n        </form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={handleSave}>Create</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    \r\n  );\r\n}\r\n\r\nexport default ModalCreateTask;\r\n// date => setSelectedDate(date.formattedValue)\r\n// selectedEndDate.getDate() + '/0' + (selectedEndDate.getMonth() + 1) + '/' + selectedEndDate.getFullYear()","import React, { useState,useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst EditModalTask = ({modal,toggle,updateTask,taskObj}) => {\r\n    const [taskName,setTaskName]=useState(\"\");\r\n    const [description,setDescription]=useState(\"\");\r\n    const [selectedStartDate,setSelectedStartDate]=useState(new Date())\r\n    const [selectedEndDate,setSelectedEndDate]=useState(new Date())\r\n    const handleChange=(e) =>{\r\n        const {name,value}=e.target\r\n        if(name===\"taskName\"){\r\n          setTaskName(value)\r\n        }\r\n        else{\r\n          setDescription(value)\r\n        } \r\n    }\r\n    const handleUpdate =(e)=>{\r\n        e.preventDefault()\r\n        let tempObj={}\r\n        tempObj['Name']=taskName\r\n        tempObj['Description']=description\r\n        tempObj[\"StartDate\"]=selectedStartDate.getDate() + '/0' + (selectedStartDate.getMonth() + 1) + '/' + selectedStartDate.getFullYear()\r\n        tempObj[\"EndDate\"]= selectedEndDate.getDate() + '/0' + (selectedEndDate.getMonth() + 1) + '/' + selectedEndDate.getFullYear()\r\n        updateTask(tempObj)\r\n    }\r\n    useEffect(() => {\r\n    // this is use to grab the previous values\r\n       setTaskName(taskObj.Name)\r\n       setDescription(taskObj.Description)\r\n       setSelectedStartDate()\r\n       setSelectedEndDate()\r\n   }, [])\r\n  return (\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n        <ModalBody>\r\n        <form>\r\n            <div className=\"form-group\">\r\n              <label>Task Name</label>\r\n              <input type=\"text\" className=\"form-control\" value={taskName} onChange={handleChange} name=\"taskName\"/>\r\n            </div>\r\n            <label>Select Starting Date: </label>\r\n           <DatePicker selected={selectedStartDate}  onChange={date => setSelectedStartDate(date)} \r\n           dateFormat='dd/MM/yyyy'\r\n           minDate={new Date()}\r\n             isClearable/>\r\n             <label>Select Completion Date: </label>\r\n           <DatePicker selected={selectedEndDate}  onChange={date => setSelectedEndDate(date)} \r\n           dateFormat='dd/MM/yyyy'\r\n           minDate={new Date()}\r\n             isClearable/>\r\n            <div className=\"form-group\">\r\n              <label>Task Description</label>\r\n                <textarea row=\"5\"  className=\"form-control\"value={description} onChange={handleChange} name=\"description\"></textarea>\r\n            </div>  \r\n        </form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\r\n          <Button color=\"danger\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    \r\n  );\r\n}\r\n\r\nexport default EditModalTask;","import React, {useState} from 'react';\r\nimport EditTask from './EditModalTask'\r\n\r\nconst TaskCard = ({taskObj, index, deleteTask, updateListArray}) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => {setModal(!modal);}\r\n\r\n    const updateTask = (obj) => {updateListArray(obj, index) }\r\n\r\n    const handleDelete = () => {deleteTask(index)}\r\n    \r\n    return (\r\n        <div className = \"card-wrapper mr-5\">\r\n            <div className = \"card-top\" style={{\"backgroundColor\": \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\"}}></div>\r\n            <div className = \"task-holder\">\r\n            \r\n                <span className = \"card-header\" style={{\"backgroundColor\": \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\", \"borderRadius\": \"10px\"}}>TaskName: {taskObj.Name}</span>\r\n                <p className = \"mt-3 card-paragraph\"style={{\"backgroundColor\": \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\", \"borderRadius\": \"6px\"}}>Description: {taskObj.Description}</p>\r\n               <span className = \"card-header\" style={{\"backgroundColor\": \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\", \"borderRadius\": \"10px\"}}>Starting Date: {taskObj.StartDate}</span>\r\n               <span className = \"card-header\" style={{\"backgroundColor\": \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\" ,\"borderRadius\": \"10px\"}}>Completion Date: {taskObj.EndDate}</span>\r\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\r\n                    <i className = \"fas fa-edit mr-3\" style={{\"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\r\n                    <i className=\"fas fa-trash\" style = {{ \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\r\n                </div>\r\n        </div>\r\n        <EditTask modal = {modal} toggle = {toggle} updateTask = {updateTask} taskObj = {taskObj}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskCard\r\n","import React,{useEffect,useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CreateTask from './ModalCreateTask';\r\nimport TaskCard from './TaskCard';\r\n function Home() {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([]);\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const saveTasks =(taskObj)=>{\r\n        let dupList= taskList\r\n        dupList.push(taskObj)\r\n        localStorage.setItem(\"taskList\",JSON.stringify(dupList))\r\n        setModal(false)\r\n        setTaskList(dupList)\r\n        window.location.reload()\r\n    }\r\n    const deleteTask= (index)=>{\r\n        let dupList=taskList;\r\n        dupList.splice(index,1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(dupList))\r\n        setTaskList(dupList)\r\n        window.location.reload()\r\n        \r\n    }\r\n    const updateListArray =(obj,index)=>{\r\n        let tempList =taskList\r\n        tempList[index]=obj\r\n        localStorage.setItem(\"taskList\",JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n    useEffect(() => {\r\n        let arr =localStorage.getItem(\"taskList\")\r\n        if(arr){\r\n            let obj =JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n    return (\r\n        <>\r\n        <div className=\" header text-center mr-3\">\r\n            <h3 className=\"\">Create Your Todo List</h3>\r\n            <button className=\"btn btn-primary mt-5\" onClick={()=> setModal(true)}>Create Now <i class=\"fas fa-plus-circle\"></i></button>\r\n        </div>\r\n        <div className=\"task-container\">\r\n            {taskList.map((obj,index,key={index} )=><TaskCard key={index} taskObj={obj} index={index} deleteTask={deleteTask} updateListArray={updateListArray}/>)}\r\n        </div>\r\n        <CreateTask modal={modal} toggle={toggle} save={saveTasks}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","\nimport './App.css';\nimport Home from './components/Home';\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}